stages:
  - build
  - deploy

default:
  image: golang:tip-alpine

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

# build the project
build:
  stage: build
  before_script:
    - apk add --no-cache make
  script:
    - make build
    - chmod a+x build/apiserver # (not sure if this is needed)
  artifacts:
    paths:
      - build # build output
      - config # config yamls directory

# secure-copy for apiserver binary transmission to the webserver
scp_binary:
  stage: deploy
  before_script:
    - apk add --no-cache openssh coreutils curl
    - eval $(ssh-agent -s)
    - echo "$SSH_DEPLOY_PRIVATE_KEY_B64" | base64 -d | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    # recieved errors from the server when replacing files for some reason, so remove previous artifacts first...
    - ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        $SSH_DEPLOY_USERNAME@$SSH_DEPLOY_HOST "rm -rf apiserver config"
    # ...and then send the new data to the server:
    - scp -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        build/apiserver $SSH_DEPLOY_USERNAME@$SSH_DEPLOY_HOST:/home/$SSH_DEPLOY_USERNAME/apiserver
    - scp -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        -r config $SSH_DEPLOY_USERNAME@$SSH_DEPLOY_HOST:/home/$SSH_DEPLOY_USERNAME/ # scp creates the dest config/ directory
  after_script:
    # restart the alwaysdata deployment to show changes
    - curl -X POST --basic --user "$ALWAYSDATA_RESTART_TOKEN account=$SSH_DEPLOY_USERNAME:"
      https://api.alwaysdata.com/v1/site${ALWAYSDATA_SITE_ID_SLASHED}restart/
